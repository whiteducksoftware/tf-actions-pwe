name: TF_Init

on:
  workflow_call:
    inputs:
      stage:
        description: 'A username passed from the caller workflow'
        required: true
        type: string
      tfVersion:
        type: string
        required: true
        description: The Terrafrom version to use.
      subscriptionId:
        type: string
        required: true
        description: The Environment.
      tenantId:
        type: string
        required: true
        description: The Environment.
    secrets:
      arm_client_id:
        description: 'A token passed from the caller workflow'
        required: true
      arm_client_secret:
        description: 'A token passed from the caller workflow'
        required: true
      sa_access_key:
        description: 'A token passed from the caller workflow'
        required: true
      sa_name:
        description: 'A token passed from the caller workflow'
        required: true
      sc_name:
        description: 'A token passed from the caller workflow'
        required: true

jobs:
  tf-apply:
    runs-on: [self-hosted]
    environment: ${{ input.stage }}
    defaults:
      run:
        shell: bash
        working-directory: src
    env:
      ### AZURE Client details ###
      ARM_CLIENT_ID: ${{ secrets.arm_client_id }}
      ARM_CLIENT_SECRET: ${{ secrets.arm_client_secret }}
      ARM_SUBSCRIPTION_ID: ${{ inputs.subscriptionId }}
      ARM_TENANT_ID: ${{ inputs.tenantId }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3.2.0

      - name: Setup Terraform - ${{ inputs.tfVersion }}
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ inputs.tfVersion}}

      - name: Terraform Init
        id: init
        run: |
          terraform init -reconfigure -input=false \
            -backend-config="access_key=${{ secrets.sa_access_key}}" \
            -backend-config="storage_account_name=${{ secrets.sa_name }}" \
            -backend-config="container_name=${{ secrets.sc_name }}" \
            -backend-config="key=${{ inputs.stage }}.tfstate"

      - name: Terraform Format
        id: fmt
        run: terraform fmt --check

      - name: Terraform Validate
        id: validate
        run: terraform validate

      - name: Terraform Plan
        id: plan
        run: |
          terraform plan -out ./tfplan.out \
            -var-file=./env/${{ inputs.stage }}.tfvars
        continue-on-error: true
